{"ast":null,"code":"var _jsxFileName = \"C:\\\\VisualStudio\\\\Web\\\\jwt-auth\\\\client\\\\src\\\\index.tsx\";\nimport { ApolloClient } from \"@apollo/client\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { onError } from \"apollo-link-error\";\nimport { HttpLink } from \"apollo-link-http\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { getAccessToken } from \"./accessToken\";\nimport { App } from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(oper => {\n    const accessToken = getAccessToken();\n    return {\n      headers: {\n        authorization: accessToken ? `Bearer ${accessToken}` : \"\"\n      }\n    };\n  }).then(() => {\n    handle = forward(operation).subscribe({\n      next: observer.next.bind(observer),\n      error: observer.error.bind(observer),\n      complete: observer.complete.bind(observer)\n    });\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst client = new ApolloClient({\n  link: ApolloLink.from([onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  }), requestLink, new HttpLink({\n    uri: \"http://localhost:4000/graphql\",\n    credentials: \"include\"\n  })]),\n  cache,\n  resolvers: {\n    Mutation: {\n      updateNetworkStatus: (_, {\n        isConnected\n      }, {\n        cache\n      }) => {\n        cache.writeData({\n          data: {\n            isConnected\n          }\n        });\n        return null;\n      }\n    }\n  }\n});\ncache.writeData({\n  data: {\n    isConnected: true\n  }\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 72,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/VisualStudio/Web/jwt-auth/client/src/index.tsx"],"names":["ApolloClient","ApolloProvider","InMemoryCache","ApolloLink","Observable","onError","HttpLink","React","ReactDOM","getAccessToken","App","cache","requestLink","operation","forward","observer","handle","Promise","resolve","then","oper","accessToken","headers","authorization","subscribe","next","bind","error","complete","catch","unsubscribe","client","link","from","graphQLErrors","networkError","console","log","uri","credentials","resolvers","Mutation","updateNetworkStatus","_","isConnected","writeData","data","render","document","getElementById"],"mappings":"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","sourcesContent":["import { ApolloClient } from \"@apollo/client\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloLink, Observable } from \"apollo-link\";\nimport { onError } from \"apollo-link-error\";\nimport { HttpLink } from \"apollo-link-http\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { getAccessToken } from \"./accessToken\";\nimport { App } from \"./App\";\n\nconst cache = new InMemoryCache({});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then((oper) => {\n          const accessToken = getAccessToken();\n          return {\n            headers: {\n              authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n            },\n          };\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      console.log(graphQLErrors);\n      console.log(networkError);\n    }),\n    requestLink,\n    new HttpLink({\n      uri: \"http://localhost:4000/graphql\",\n      credentials: \"include\",\n    }),\n  ]),\n  cache,\n  resolvers: {\n    Mutation: {\n      updateNetworkStatus: (_, { isConnected }, { cache }) => {\n        cache.writeData({ data: { isConnected } });\n        return null;\n      },\n    },\n  },\n});\n\ncache.writeData({\n  data: {\n    isConnected: true,\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}