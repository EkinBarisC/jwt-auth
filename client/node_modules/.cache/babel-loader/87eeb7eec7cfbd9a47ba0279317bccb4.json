{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const HelloDocument = gql`\n    query Hello {\n  hello\n}\n    `;\n/**\n * __useHelloQuery__\n *\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHelloQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useHelloQuery(baseOptions) {\n  _s();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(HelloDocument, options);\n}\n\n_s(useHelloQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useHelloLazyQuery(baseOptions) {\n  _s2();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(HelloDocument, options);\n}\n\n_s2(useHelloLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["C:/VisualStudio/Web/jwt-auth/client/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","HelloDocument","useHelloQuery","baseOptions","options","useQuery","useHelloLazyQuery","useLazyQuery"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAKA,MAAMC,cAAc,GAAI,EAAxB;AACA;;AA4DA,OAAO,MAAMC,aAAa,GAAGH,GAAI;AACjC;AACA;AACA;AACA,KAJO;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,aAAT,CAAuBC,WAAvB,EAA+F;AAAA;;AAC9F,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACM,QAAP,CAAiDJ,aAAjD,EAAgEG,OAAhE,CAAP;AACD;;GAHSF,a;UAEDH,MAAM,CAACM,Q;;;AAEtB,OAAO,SAASC,iBAAT,CAA2BH,WAA3B,EAAuG;AAAA;;AACpG,QAAMC,OAAO,GAAG,EAAC,GAAGJ,cAAJ;AAAoB,OAAGG;AAAvB,GAAhB;AACA,SAAOJ,MAAM,CAACQ,YAAP,CAAqDN,aAArD,EAAoEG,OAApE,CAAP;AACD;;IAHOE,iB;UAECP,MAAM,CAACQ,Y","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type LoginResponse = {\n  __typename?: 'LoginResponse';\n  accessToken: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  revokeRefreshTokenForUser: Scalars['Boolean'];\n  login: LoginResponse;\n  register: Scalars['Boolean'];\n};\n\n\nexport type MutationRevokeRefreshTokenForUserArgs = {\n  userId: Scalars['Int'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  bye: Scalars['String'];\n  users: Array<User>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n};\n\nexport type HelloQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type HelloQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'hello'>\n);\n\n\nexport const HelloDocument = gql`\n    query Hello {\n  hello\n}\n    `;\n\n/**\n * __useHelloQuery__\n *\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHelloQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useHelloQuery(baseOptions?: Apollo.QueryHookOptions<HelloQuery, HelloQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<HelloQuery, HelloQueryVariables>(HelloDocument, options);\n      }\nexport function useHelloLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HelloQuery, HelloQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<HelloQuery, HelloQueryVariables>(HelloDocument, options);\n        }\nexport type HelloQueryHookResult = ReturnType<typeof useHelloQuery>;\nexport type HelloLazyQueryHookResult = ReturnType<typeof useHelloLazyQuery>;\nexport type HelloQueryResult = Apollo.QueryResult<HelloQuery, HelloQueryVariables>;"]},"metadata":{},"sourceType":"module"}