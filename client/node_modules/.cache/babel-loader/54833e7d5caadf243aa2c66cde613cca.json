{"ast":null,"code":"var _jsxFileName = \"C:\\\\VisualStudio\\\\Web\\\\jwt-auth\\\\client\\\\src\\\\index.tsx\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { App } from \"./App\";\n/* import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\"; */\n\n/* import { HttpLink } from \"apollo-link-http\";\nimport { ApolloLink, Observable } from \"apollo-link\"; */\n\n/* import { onError } from \"apollo-link-error\"; */\n\nimport jwtDecode from \"jwt-decode\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { ApolloClient, InMemoryCache, HttpLink, ApolloLink, Observable } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cache = new InMemoryCache({});\nconst requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(operation => {\n    const accessToken = getAccessToken();\n\n    if (accessToken) {\n      operation.setContext({\n        headers: {\n          authorization: \"bearer \" + accessToken\n        }\n      });\n    }\n  }).then(() => {\n    handle = forward(operation).subscribe({\n      next: observer.next.bind(observer),\n      error: observer.error.bind(observer),\n      complete: observer.complete.bind(observer)\n    });\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst client = new ApolloClient({\n  link: ApolloLink.from([new TokenRefreshLink({\n    accessTokenField: \"accessToken\",\n    isTokenValidOrUndefined: () => {\n      const token = getAccessToken();\n\n      if (!token) {\n        return true;\n      }\n\n      try {\n        const decoded = jwtDecode(token);\n        const exp = decoded.exp;\n\n        if (Date.now() > exp * 1000) {\n          return false;\n        } else {\n          return true;\n        }\n      } catch (error) {\n        return false;\n      }\n    },\n    fetchAccessToken: () => {\n      return fetch(\"http://localhost:4000/refresh_token\", {\n        method: \"POST\",\n        credentials: \"include\"\n      });\n    },\n    handleFetch: accessToken => {\n      setAccessToken(accessToken);\n    },\n    handleError: err => {\n      // full control over handling token fetch Error\n      console.warn(\"Your refresh token is invalid. Try to relogin\");\n      console.error(err);\n    }\n  }), onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    console.log(graphQLErrors);\n    console.log(networkError);\n  }), requestLink, new HttpLink({\n    uri: \"http://localhost:4000/graphql\",\n    credentials: \"include\"\n  })]),\n  cache,\n  resolvers: {\n    Mutation: {\n      updateNetworkStatus: (_, {\n        isConnected\n      }, {\n        cache\n      }) => {\n        cache.writeData({\n          data: {\n            isConnected\n          }\n        });\n        return null;\n      }\n    }\n  }\n});\ncache.writeData({\n  data: {\n    isConnected: true\n  }\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 122,\n  columnNumber: 3\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/VisualStudio/Web/jwt-auth/client/src/index.tsx"],"names":["ApolloProvider","React","ReactDOM","getAccessToken","setAccessToken","App","jwtDecode","TokenRefreshLink","onError","ApolloClient","InMemoryCache","HttpLink","ApolloLink","Observable","cache","requestLink","operation","forward","observer","handle","Promise","resolve","then","accessToken","setContext","headers","authorization","subscribe","next","bind","error","complete","catch","unsubscribe","client","link","from","accessTokenField","isTokenValidOrUndefined","token","decoded","exp","Date","now","fetchAccessToken","fetch","method","credentials","handleFetch","handleError","err","console","warn","graphQLErrors","networkError","log","uri","resolvers","Mutation","updateNetworkStatus","_","isConnected","writeData","data","render","document","getElementById"],"mappings":"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","sourcesContent":["import { ApolloProvider } from \"@apollo/react-hooks\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { getAccessToken, setAccessToken } from \"./accessToken\";\nimport { App } from \"./App\";\n/* import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\"; */\n/* import { HttpLink } from \"apollo-link-http\";\nimport { ApolloLink, Observable } from \"apollo-link\"; */\n/* import { onError } from \"apollo-link-error\"; */\nimport jwtDecode from \"jwt-decode\";\nimport { TokenRefreshLink } from \"apollo-link-token-refresh\";\nimport { onError } from \"@apollo/client/link/error\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n  HttpLink,\n  ApolloLink,\n  Observable,\n} from \"@apollo/client\";\n\nconst cache: any = new InMemoryCache({});\n\nconst requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle: any;\n      Promise.resolve(operation)\n        .then((operation) => {\n          const accessToken = getAccessToken();\n          if (accessToken) {\n            operation.setContext({\n              headers: {\n                authorization: \"bearer \" + accessToken,\n              },\n            });\n          }\n        })\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    })\n);\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    new TokenRefreshLink({\n      accessTokenField: \"accessToken\",\n      isTokenValidOrUndefined: () => {\n        const token = getAccessToken();\n\n        if (!token) {\n          return true;\n        }\n\n        try {\n          const decoded: any = jwtDecode(token);\n          const exp = decoded.exp;\n          if (Date.now() > exp * 1000) {\n            return false;\n          } else {\n            return true;\n          }\n        } catch (error) {\n          return false;\n        }\n      },\n      fetchAccessToken: () => {\n        return fetch(\"http://localhost:4000/refresh_token\", {\n          method: \"POST\",\n          credentials: \"include\",\n        });\n      },\n      handleFetch: (accessToken) => {\n        setAccessToken(accessToken);\n      },\n\n      handleError: (err) => {\n        // full control over handling token fetch Error\n        console.warn(\"Your refresh token is invalid. Try to relogin\");\n        console.error(err);\n      },\n    }),\n    onError(({ graphQLErrors, networkError }) => {\n      console.log(graphQLErrors);\n      console.log(networkError);\n    }),\n    requestLink,\n    new HttpLink({\n      uri: \"http://localhost:4000/graphql\",\n      credentials: \"include\",\n    }),\n  ]),\n  cache,\n  resolvers: {\n    Mutation: {\n      updateNetworkStatus: (_, { isConnected }, { cache }) => {\n        cache.writeData({ data: { isConnected } });\n        return null;\n      },\n    },\n  },\n});\n\ncache.writeData({\n  data: {\n    isConnected: true,\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}