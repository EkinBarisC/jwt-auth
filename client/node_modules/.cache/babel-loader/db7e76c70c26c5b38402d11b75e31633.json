{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$();\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport const HelloDocument = gql`\n    query Hello {\n  hello\n}\n    `;\n/**\n * __useHelloQuery__\n *\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHelloQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useHelloQuery(baseOptions) {\n  _s();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(HelloDocument, options);\n}\n\n_s(useHelloQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useHelloLazyQuery(baseOptions) {\n  _s2();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(HelloDocument, options);\n}\n\n_s2(useHelloLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n  }\n}\n    `;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s3();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(LoginDocument, options);\n}\n\n_s3(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions) {\n  _s4();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(LogoutDocument, options);\n}\n\n_s4(useLogoutMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n  }\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  _s5();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(MeDocument, options);\n}\n\n_s5(useMeQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMeLazyQuery(baseOptions) {\n  _s6();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(MeDocument, options);\n}\n\n_s6(useMeLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!) {\n  register(email: $email, password: $password)\n}\n    `;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions) {\n  _s7();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useMutation(RegisterDocument, options);\n}\n\n_s7(useRegisterMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useUsersQuery(baseOptions) {\n  _s8();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(UsersDocument, options);\n}\n\n_s8(useUsersQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useUsersLazyQuery(baseOptions) {\n  _s9();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(UsersDocument, options);\n}\n\n_s9(useUsersLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"sources":["C:/VisualStudio/Web/jwt-auth/client/src/generated/graphql.tsx"],"names":["gql","Apollo","defaultOptions","HelloDocument","useHelloQuery","baseOptions","options","useQuery","useHelloLazyQuery","useLazyQuery","LoginDocument","useLoginMutation","useMutation","LogoutDocument","useLogoutMutation","MeDocument","useMeQuery","useMeLazyQuery","RegisterDocument","useRegisterMutation","UsersDocument","useUsersQuery","useUsersLazyQuery"],"mappings":"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","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type LoginResponse = {\n  __typename?: 'LoginResponse';\n  accessToken: Scalars['String'];\n  user: User;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  logout: Scalars['Boolean'];\n  revokeRefreshTokenForUser: Scalars['Boolean'];\n  login: LoginResponse;\n  register: Scalars['Boolean'];\n};\n\n\nexport type MutationRevokeRefreshTokenForUserArgs = {\n  userId: Scalars['Int'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationRegisterArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hello: Scalars['String'];\n  bye: Scalars['String'];\n  users: Array<User>;\n  me?: Maybe<User>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n};\n\nexport type HelloQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type HelloQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'hello'>\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'LoginResponse' }\n    & Pick<LoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'User' }\n      & Pick<User, 'id' | 'email'>\n    ) }\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  )> }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'register'>\n);\n\nexport type UsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UsersQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  )> }\n);\n\n\nexport const HelloDocument = gql`\n    query Hello {\n  hello\n}\n    `;\n\n/**\n * __useHelloQuery__\n *\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHelloQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useHelloQuery(baseOptions?: Apollo.QueryHookOptions<HelloQuery, HelloQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<HelloQuery, HelloQueryVariables>(HelloDocument, options);\n      }\nexport function useHelloLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HelloQuery, HelloQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<HelloQuery, HelloQueryVariables>(HelloDocument, options);\n        }\nexport type HelloQueryHookResult = ReturnType<typeof useHelloQuery>;\nexport type HelloLazyQueryHookResult = ReturnType<typeof useHelloLazyQuery>;\nexport type HelloQueryResult = Apollo.QueryResult<HelloQuery, HelloQueryVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n    user {\n      id\n      email\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!) {\n  register(email: $email, password: $password)\n}\n    `;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const UsersDocument = gql`\n    query Users {\n  users {\n    id\n    email\n  }\n}\n    `;\n\n/**\n * __useUsersQuery__\n *\n * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n      }\nexport function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);\n        }\nexport type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;\nexport type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;\nexport type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;"]},"metadata":{},"sourceType":"module"}